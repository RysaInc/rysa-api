---
swagger: "2.0"
info:
  description: "Swagger API documentation for Rysa backend service."
  version: "1.0.0"
  title: "Rysa API"
  contact:
    email: "zeraye@protonmail.com"
  license:
    name: "MIT"
    url: "https://raw.githubusercontent.com/RysaInc/rysa-api/master/LICENSE"
host: "ray-guided-utterly.ngrok-free.app"
basePath: "/v1"
tags:
  - name: "project"
    description: "Everything about project"
  - name: "project/code"
    description: "Everything about project code"
  - name: "project/scene"
    description: "Everything about project scene"
  - name: "project/scene/sprite"
    description: "Everything about project scene sprite"
  - name: "picture"
    description: "Everything about picture"
  - name: "notifications"
    description: "Everything about notifications"
schemes:
  - "https"
  - "http"
paths:
  /project:
    post:
      tags:
        - "project"
      summary: "Creates a project"
      description: ""
      operationId: "createProject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Project object that needs to be created"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ProjectWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - api_key: []
  /project/{projectId}:
    get:
      tags:
        - "project"
      summary: "Get project by ID"
      description: ""
      operationId: "getProjectById"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project to return"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ProjectWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    put:
      tags:
        - "project"
      summary: "Updates a project"
      description: ""
      operationId: "updateProject"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be updated"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Project object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Project"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    delete:
      tags:
        - "project"
      summary: "Deletes a project"
      description: ""
      operationId: "deleteProject"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
  /project/{projectId}/code:
    post:
      tags:
        - "project/code"
      summary: "Updates a project code"
      description: ""
      operationId: "updateProjectCode"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be updated"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Project code"
          required: true
          schema:
            type: "string"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    get:
      tags:
        - "project/code"
      summary: "Get project code by ID"
      description: ""
      operationId: "getProjectCodeById"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project to return"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "string"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    delete:
      tags:
        - "project/code"
      summary: "Deletes a project code"
      description: ""
      operationId: "deleteProjectCode"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
  /project/{projectId}/scene:
    post:
      tags:
        - "project/scene"
      summary: "Updates a project scene"
      description: ""
      operationId: "updateProjectScene"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be updated"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "List of sprites"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpriteWithId"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    get:
      tags:
        - "project/scene"
      summary: "Get project scene by ID"
      description: ""
      operationId: "getProjectSceneById"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project to return"
          required: true
          type: "string"
          format: "uuid"
        - name: "needCode"
          in: "query"
          description: "Whether to include code in response"
          required: false
          type: "boolean"
        - name: "needBase64Image"
          in: "query"
          description: "Whether to include base64 image in response"
          required: false
          type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SpriteWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    delete:
      tags:
        - "project/scene"
      summary: "Deletes a project scene"
      description: ""
      operationId: "deleteProjectScene"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
  /project/{projectId}/scene/{spriteId}:
    post:
      tags:
        - "project/scene/sprite"
      summary: "Updates a sprite"
      description: ""
      operationId: "updateSprite"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be created"
          required: true
          type: "string"
          format: "uuid"
        - name: "spriteId"
          in: "path"
          description: "ID of sprite that needs to be created"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Sprite object that needs to be created"
          required: true
          schema:
            $ref: "#/definitions/Sprite"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/SpriteWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    put:
      tags:
        - "project/scene/sprite"
      summary: "Creates a sprite"
      description: ""
      operationId: "createSprite"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be updated"
          required: true
          type: "string"
          format: "uuid"
        - name: "spriteId"
          in: "path"
          description: "ID of sprite that needs to be created"
          required: true
          type: "string"
          format: "uuid"
        - in: "body"
          name: "body"
          description: "Sprite object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Sprite"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/SpriteWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    get:
      tags:
        - "project/scene/sprite"
      summary: "Get sprite by ID"
      description: ""
      operationId: "getSpriteById"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project to return"
          required: true
          type: "string"
          format: "uuid"
        - name: "spriteId"
          in: "path"
          description: "ID of sprite to return"
          required: true
          type: "string"
          format: "uuid"
        - name: "needCode"
          in: "query"
          description: "Whether to include code in response"
          required: false
          type: "boolean"
        - name: "needBase64Image"
          in: "query"
          description: "Whether to include base64 image in response"
          required: false
          type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/SpriteWithId"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
    delete:
      tags:
        - "project/scene/sprite"
      summary: "Deletes a sprite"
      description: ""
      operationId: "deleteSprite"
      produces:
        - "application/json"
      parameters:
        - name: "projectId"
          in: "path"
          description: "ID of project that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
        - name: "spriteId"
          in: "path"
          description: "ID of sprite that needs to be deleted"
          required: true
          type: "string"
          format: "uuid"
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
  /picture/defaultPictures:
    get:
      tags:
        - "picture"
      summary: "Get default pictures"
      description: ""
      operationId: "getDefaultPictures"
      produces:
        - "application/json"
      parameters:
        - name: "needBase64Image"
          in: "query"
          description: "Whether to include base64 image in response"
          required: false
          type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Image"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - api_key: []
  /picture/{pictureId}:
    get:
      tags:
        - "picture"
      summary: "Get picture by ID"
      description: ""
      operationId: "getPictureById"
      produces:
        - "application/json"
      parameters:
        - name: "pictureId"
          in: "path"
          description: "ID of picture to return"
          required: true
          type: "string"
          format: "uuid"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Image"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - api_key: []
  /notifications:
    get:
      tags:
        - "notifications"
      summary: "Get notifications"
      description: ""
      operationId: "getNotifications"
      produces:
        - "application/json"
      parameters:
        - name: "needBase64Image"
          in: "query"
          description: "Whether to include base64 image in response"
          required: false
          type: "boolean"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Bearer:"
    in: "header"
definitions:
  Project:
    type: "object"
    properties:
      name:
        type: "string"
        example: "My simple project"
      description:
        type: "string"
        example: "This is my first project created in Rysa"
  ProjectWithUneditableFields:
    allOf:
      - type: "object"
        properties:
          likes:
            type: "integer"
            format: "int64"
            example: 6
          created_at:
            type: "string"
            format: "date-time"
          updated_at:
            type: "string"
            format: "date-time"
      - $ref: "#/definitions/Project"
  ProjectWithId:
    allOf:
      - type: "object"
        properties:
          id:
            type: "string"
            format: "uuid"
      - $ref: "#/definitions/ProjectWithUneditableFields"
  Image:
    type: "object"
    properties:
      image:
        properties:
          id:
            type: "string"
            format: "uuid"
          base64:
            type: "string"
            format: "byte"
  SpriteImage:
    allOf:
      - $ref: "#/definitions/Image"
      - type: "object"
        properties:
          image:
            properties:
              defaultImageId:
                type: "string"
                format: "uuid"
  SpriteAttributes:
    type: "object"
    properties:
      attributes:
        properties:
          x:
            type: "integer"
            format: "int64"
          y:
            type: "integer"
            format: "int64"
  Sprite:
    allOf:
      - $ref: "#/definitions/SpriteAttributes"
      - type: "object"
        properties:
          code:
            type: "string"
      - $ref: "#/definitions/SpriteImage"

  SpriteWithId:
    allOf:
      - type: "object"
        properties:
          id:
            type: "string"
            format: "uuid"
      - $ref: "#/definitions/Sprite"
  Notification:
    type: "object"
    properties:
      title:
        type: "string"
        example: "New notification"
      description:
        type: "string"
        example: "You have a new notification"
